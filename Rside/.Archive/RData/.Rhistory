library(dplyr)
library(stringr)
getwd()
publish_content <- read.csv("data/publisher_contents.csv")
#View(publish_content)
#View(adver_camp)
class(publish_content)
colnames(publish_content)
dim(publish_content)
length(unique(publish_content$ID))
length(unique(publish_content$Total.Likes))
length(unique(publish_content$Total.Views))
length(unique(publish_content$Price))
length(unique(publish_content$Total.Interactions))
length(unique(publish_content$Total.Reach))
length(unique(publish_content$Publisher.Price))
length(unique(publish_content$Media.Plan.Price))
length(unique(publish_content$Has.Paid.Partnership))
length(unique(publish_content$Media.App.Media.Plan...Media.Plan...Content.Type))
length(unique(publish_content$Media.App.Media.Plan...Media.Plan...Campaign.Type))
length(unique(publish_content$Media.App.Media.Plan...Media.Plan...Is.Vip))
length(unique(publish_content$Media.App.Media.Category...Media.Category...ID))
length(unique(publish_content$Media.App.Media...Media...Is.Influencer))
length(unique(publish_content$Media.App.Media...Media...Is.Private))
length(unique(publish_content$Media.App.Media...Media...Is.Celebrity))
length(unique(publish_content$Media.App.Media.Category...Media.Category...Title))
length(unique(publish_content$Media.App.Media...Media...Publisher.ID))
dim(publish_content)
publisherDF <- publish_content %>%
select( c(ID,Media.App.Media...Media...Publisher.ID,Total.Likes,Total.Views,Price,Total.Interactions,Total.Reach,
Publisher.Price, Media.Plan.Price, Has.Paid.Partnership, Media.App.Media.Plan...Media.Plan...Content.Type,
Media.App.Media.Plan...Media.Plan...Campaign.Type,Media.App.Media.Plan...Media.Plan...Is.Vip,
Media.App.Media.Category...Media.Category...ID, Media.App.Media...Media...Is.Influencer,
Media.App.Media...Media...Is.Private,Media.App.Media...Media...Is.Celebrity,
Media.App.Media.Category...Media.Category...Title, Media.App.Media...Media...Publisher.ID) )
dim(publisherDF)
interactions <- read.csv("data/interactions.csv")
advertiserDF <-  read.csv("output/advertiser.csv")
UniqAdertisers <- unique(advertiserDF$Advertiser.ID)
bothpresents <- list()
num_ = 1
for (UniqAdertiser in UniqAdertisers) {
bothpresents[[num_]] <-  which( interactions$Campaign.Campaign...Campaign...Advertiser.ID == UniqAdertiser)
num_ = num_+1
}
length(bothpresents)
both_present <- vector()
for ( i in c(1:length(bothpresents))) {
for ( j in c(1:length(bothpresents[[i]]))) {
both_present <- c(both_present, bothpresents[[i]][j])
}
}
length(both_present)
both_present <- na.omit(both_present)
length(both_present)
validus <- interactions$Media.App.Media...Media...Publisher.ID[both_present]
length(validus)
validus <- unique(validus)
length(validus)
finalSteps1 <- list()
num_ = 1
for (i  in validus ) {
finalSteps1[[num_]] <- ( which( publisherDF$Media.App.Media...Media...Publisher.ID ==  i) )
num_ = num_ + 1
}
finalSteps2 <- vector()
for ( i in c(1:length(finalSteps1))) {
for ( j in c(1:length(finalSteps1[[i]]))) {
finalSteps2 <- c(finalSteps2, finalSteps1[[i]][j])
}
}
length(finalSteps2)
finalSteps2 <- na.omit(finalSteps2)
length(finalSteps2)
PublisherDF <- publisherDF[finalSteps2,]
dim(PublisherDF)
inValids <- which(PublisherDF$Total.Likes == 0)
PublisherDF <- PublisherDF[inValids,]
dim(PublisherDF)
PublisherDataFrame <- publisherDF[finalSteps2,]
dim(PublisherDataFrame)
ValidsA <- which(PublisherDataFrame$Total.Likes != 0)
PublisherDataFrame <- PublisherDataFrame[ValidsA,]
dim(PublisherDataFrame)
uniqPublisher <- unique(PublisherDataFrame$Media.App.Media.Category...Media.Category...Title)
class(uniqAdvers)
class(uniqPublisher)
length(uniqPublisher)
allcateg <- PublisherDataFrame$Media.App.Media.Category...Media.Category...Title
class(allcateg)
allcateg[1]
uniqPublisherCateg <- unique(PublisherDataFrame$Media.App.Media.Category...Media.Category...Title)
uniqPublisherCateg
unique(advertiserDF$Media.Plans.Filter...Categories)
install.packages("translateR")
install.packages("translate.logit")
install.packages("translated")
library(translated)
translated::trans_available()
install.packages("translate")
install.packages("stranslate")
library(stranslate)
stranslate::language()
stranslate::setLang()
stranslate::setLang(.lang = 'per')
stranslate::language()
stranslate::setLang(.lang = 'fas')
stranslate::language()
stranslate::setLang(.lang = 'fas')
stranslate::allFunctions()
trans_available
trans_available()
stranslate::language()
stranslate::setLang()
stranslate::setMsg("allFunctions")
stranslate::setMsg(allFunctions)
stranslate::setMsg()
install.packages("polyglotr")
install.packages("httr")
install.packages("curl")
install.packages("curl")
install.packages("httr")
install.packages("httr")
install.packages("polyglotr")
library(polyglotr)
install.packages("polyglotr")
library(polyglotr)
polyglotr::google_get_supported_languages()
polyglotr::language_detect("Hi")
polyglotr::language_detect("سلام")
polyglotr::translate_file("سلام")
polyglotr::google_transliterate(text = "سلام", language_tag = "en")
polyglotr::google_transliterate(text = "سلام", language_tag = "en",num = 1)
polyglotr::google_transliterate(text = "سلام")
polyglotr::google_transliterate(text = "سلام")
polyglotr::google_supported_languages
options("max.print" = 5000)
polyglotr::google_supported_languages
polyglotr::google_translate(text = "سلام", target_language = "en")
polyglotr::google_translate(text = "سلام", target_language = "en", source_language = "fa")
uniqPublisherCateg <- unique(PublisherDataFrame$Media.App.Media.Category...Media.Category...Title)
polyglotr::google_translate(text = uniqPublisherCateg, target_language = "en")
allcateg <-   advertiserDF$Media.App.Media.Category...Media.Category...Title
allcateg
allcateg <-   advertiserDF$Media.Plans.Filter...Categories
allcateg
polyglotr::google_translate(allcateg, target_language = "en", source_language = "fa")
uniqPublisherCateg <- unique(PublisherDataFrame$Media.App.Media.Category...Media.Category...Title)
for (i in uniqPublisherCateg) {
polyglotr::google_translate(i, target_language = "fa", source_language = "en")
}
uniqPublisherCategTranslate <- vector()
for (i in uniqPublisherCateg) {
uniqPublisherCateg <- c(uniqPublisherCateg, polyglotr::google_translate(i, target_language = "fa", source_language = "en"))
}
uniqPublisherCateg
uniqPublisherCategTranslate
uniqPublisherCateg
uniqPublisherCateg <- unique(PublisherDataFrame$Media.App.Media.Category...Media.Category...Title)
for (i in uniqPublisherCateg) {
uniqPublisherCategTranslate <- c(uniqPublisherCategTranslate, polyglotr::google_translate(i, target_language = "fa", source_language = "en"))
}
length(uniqPublisherCategTranslate)
length(uniqPublisherCategTranslate)
class(uniqPublisherCateg)
length(uniqPublisherCateg)
uniqPublisherCategTranslate
head(uniqPublisherCategTranslate)
library(polyglotr)
write.csv(x = PublisherDataFrame , file =  "output/publishers.csv")
#
library(conflicted)
library(dplyr)
library(stringr)
getwd()
adver_camp <- read.csv("data/advertiser_campaigns.csv")
publish_content <- read.csv("data/publisher_contents.csv")
#View(publish_content)
#View(adver_camp)
class(publish_content)
class(adver_camp)
colnames(publish_content)
colnames(adver_camp)
dim(publish_content)
dim(adver_camp)
length(unique(adver_camp$ID))
length(unique(adver_camp$Advertiser.ID))
length(unique(adver_camp$Media.Plans.Filter...Categories))
length(unique(adver_camp$Campaign.Campaign.Category...Campaign.Category...ID))
length(unique(adver_camp$Publish.Period.Start))
length(unique(adver_camp$Campaign.Type))
length(unique(adver_camp$Manager.ID))
length(unique(adver_camp$Management.Percent.Fee))
length(unique(adver_camp$Quality.Of.Advertise))
length(unique(adver_camp$Quality.Of.Business))
length(unique(adver_camp$Is.Official))
length(unique(adver_camp$Is.Short.Link.Enabled))
length(unique(adver_camp$Is.Utm.Enabled))
length(unique(adver_camp$Is.Competition.Or.Has.Award))
dim(adver_camp)
advertiserDF <- adver_camp %>%
select( c(ID,Advertiser.ID,Media.Plans.Filter...Categories,Campaign.Campaign.Category...Campaign.Category...ID,
Campaign.Type, Manager.ID, Management.Percent.Fee, Is.Utm.Enabled,Publish.Period.Start,Budget,
Quality.Of.Advertise, Quality.Of.Business,Is.Official, Is.Short.Link.Enabled,Is.Competition.Or.Has.Award) )
dim(advertiserDF)
unique(advertiserDF$Media.Plans.Filter...Categories)[2]
unique(advertiserDF$Media.Plans.Filter...Categories)[4]
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[2] )] <-
NA )
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[4] )] <-
NA )
advertiserDF <- na.omit(advertiserDF)
dim(advertiserDF)
uniqAdvers <- unique(advertiserDF$Advertiser.ID)
class(uniqAdvers)
length(uniqAdvers)
allcateg <- advertiserDF$Media.Plans.Filter...Categories
class(allcateg)
allcateg[1]
#strsplit(x = allcateg[1], split = "")
num_ = 1
for (eachCategory in allcateg) {
temp <- str_extract_all(eachCategory, boundary("word"))
for (j in temp) {
for (p in j) {
if ( isTRUE( p == "") == FALSE) {
if (  isTRUE( p == "\"title_fa\"" ) == FALSE  ) {
if (  isTRUE( p == "title_fa" ) == FALSE  ) {
if (  isTRUE( p == "title" ) == FALSE  ) {
if (  is.na( str_extract(p , "\\D+")) == FALSE  ) {
advertiserDF$Media.Plans.Filter...Categories[[num_]] <- p
break
}
}
}
}
}
}
num_ = num_+1
}
}
allcateg <- advertiserDF$Media.Plans.Filter...Categories
allcateg[1]
allcateg[20]
allcateg[200]
library(polyglotr)
for ( i in advertiserDF$Media.Plans.Filter...Categories) {
advertiserDF$Media.Plans.Filter...Categories <-
polyglotr::google_translate(i, target_language = "en", source_language = "fa")
}
#
library(conflicted)
library(dplyr)
library(stringr)
getwd()
adver_camp <- read.csv("data/advertiser_campaigns.csv")
publish_content <- read.csv("data/publisher_contents.csv")
#View(publish_content)
#View(adver_camp)
class(publish_content)
class(adver_camp)
colnames(publish_content)
colnames(adver_camp)
dim(publish_content)
dim(adver_camp)
length(unique(adver_camp$ID))
length(unique(adver_camp$Advertiser.ID))
length(unique(adver_camp$Media.Plans.Filter...Categories))
length(unique(adver_camp$Campaign.Campaign.Category...Campaign.Category...ID))
length(unique(adver_camp$Publish.Period.Start))
length(unique(adver_camp$Campaign.Type))
length(unique(adver_camp$Manager.ID))
length(unique(adver_camp$Management.Percent.Fee))
length(unique(adver_camp$Quality.Of.Advertise))
length(unique(adver_camp$Quality.Of.Business))
length(unique(adver_camp$Is.Official))
length(unique(adver_camp$Is.Short.Link.Enabled))
length(unique(adver_camp$Is.Utm.Enabled))
length(unique(adver_camp$Is.Competition.Or.Has.Award))
dim(adver_camp)
advertiserDF <- adver_camp %>%
select( c(ID,Advertiser.ID,Media.Plans.Filter...Categories,Campaign.Campaign.Category...Campaign.Category...ID,
Campaign.Type, Manager.ID, Management.Percent.Fee, Is.Utm.Enabled,Publish.Period.Start,Budget,
Quality.Of.Advertise, Quality.Of.Business,Is.Official, Is.Short.Link.Enabled,Is.Competition.Or.Has.Award) )
dim(advertiserDF)
unique(advertiserDF$Media.Plans.Filter...Categories)[2]
unique(advertiserDF$Media.Plans.Filter...Categories)[4]
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[2] )] <-
NA )
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[4] )] <-
NA )
advertiserDF <- na.omit(advertiserDF)
dim(advertiserDF)
uniqAdvers <- unique(advertiserDF$Advertiser.ID)
class(uniqAdvers)
length(uniqAdvers)
allcateg <- advertiserDF$Media.Plans.Filter...Categories
class(allcateg)
allcateg[1]
#strsplit(x = allcateg[1], split = "")
num_ = 1
for (eachCategory in allcateg) {
temp <- str_extract_all(eachCategory, boundary("word"))
for (j in temp) {
for (p in j) {
if ( isTRUE( p == "") == FALSE) {
if (  isTRUE( p == "\"title_fa\"" ) == FALSE  ) {
if (  isTRUE( p == "title_fa" ) == FALSE  ) {
if (  isTRUE( p == "title" ) == FALSE  ) {
if (  is.na( str_extract(p , "\\D+")) == FALSE  ) {
advertiserDF$Media.Plans.Filter...Categories[[num_]] <- p
break
}
}
}
}
}
}
num_ = num_+1
}
}
allcateg <- advertiserDF$Media.Plans.Filter...Categories
allcateg[1]
allcateg[20]
allcateg[200]
library(polyglotr)
for ( i in advertiserDF) {
advertiserDF$Media.Plans.Filter...Categories <-
polyglotr::google_translate(i, target_language = "en", source_language = "fa")
}
#
library(conflicted)
library(dplyr)
library(stringr)
getwd()
adver_camp <- read.csv("data/advertiser_campaigns.csv")
publish_content <- read.csv("data/publisher_contents.csv")
#View(publish_content)
#View(adver_camp)
class(publish_content)
class(adver_camp)
colnames(publish_content)
colnames(adver_camp)
dim(publish_content)
dim(adver_camp)
length(unique(adver_camp$ID))
length(unique(adver_camp$Advertiser.ID))
length(unique(adver_camp$Media.Plans.Filter...Categories))
length(unique(adver_camp$Campaign.Campaign.Category...Campaign.Category...ID))
length(unique(adver_camp$Publish.Period.Start))
length(unique(adver_camp$Campaign.Type))
length(unique(adver_camp$Manager.ID))
length(unique(adver_camp$Management.Percent.Fee))
length(unique(adver_camp$Quality.Of.Advertise))
length(unique(adver_camp$Quality.Of.Business))
length(unique(adver_camp$Is.Official))
length(unique(adver_camp$Is.Short.Link.Enabled))
length(unique(adver_camp$Is.Utm.Enabled))
length(unique(adver_camp$Is.Competition.Or.Has.Award))
dim(adver_camp)
advertiserDF <- adver_camp %>%
select( c(ID,Advertiser.ID,Media.Plans.Filter...Categories,Campaign.Campaign.Category...Campaign.Category...ID,
Campaign.Type, Manager.ID, Management.Percent.Fee, Is.Utm.Enabled,Publish.Period.Start,Budget,
Quality.Of.Advertise, Quality.Of.Business,Is.Official, Is.Short.Link.Enabled,Is.Competition.Or.Has.Award) )
dim(advertiserDF)
unique(advertiserDF$Media.Plans.Filter...Categories)[2]
unique(advertiserDF$Media.Plans.Filter...Categories)[4]
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[2] )] <-
NA )
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[4] )] <-
NA )
advertiserDF <- na.omit(advertiserDF)
dim(advertiserDF)
uniqAdvers <- unique(advertiserDF$Advertiser.ID)
class(uniqAdvers)
length(uniqAdvers)
allcateg <- advertiserDF$Media.Plans.Filter...Categories
class(allcateg)
allcateg[1]
#strsplit(x = allcateg[1], split = "")
num_ = 1
for (eachCategory in allcateg) {
temp <- str_extract_all(eachCategory, boundary("word"))
for (j in temp) {
for (p in j) {
if ( isTRUE( p == "") == FALSE) {
if (  isTRUE( p == "\"title_fa\"" ) == FALSE  ) {
if (  isTRUE( p == "title_fa" ) == FALSE  ) {
if (  isTRUE( p == "title" ) == FALSE  ) {
if (  is.na( str_extract(p , "\\D+")) == FALSE  ) {
advertiserDF$Media.Plans.Filter...Categories[[num_]] <- p
break
}
}
}
}
}
}
num_ = num_+1
}
}
allcateg <- advertiserDF$Media.Plans.Filter...Categories
allcateg[1]
allcateg[20]
allcateg[200]
library(polyglotr)
for ( i in advertiserDF$Media.Plans.Filter...Categories) {
advertiserDF$Media.Plans.Filter...Categories <-
polyglotr::google_translate(i, target_language = "en", source_language = "fa")
}
advertiserDF$Media.Plans.Filter...Categories
#
library(conflicted)
library(dplyr)
library(stringr)
getwd()
adver_camp <- read.csv("data/advertiser_campaigns.csv")
publish_content <- read.csv("data/publisher_contents.csv")
#View(publish_content)
#View(adver_camp)
class(publish_content)
class(adver_camp)
colnames(publish_content)
colnames(adver_camp)
dim(publish_content)
dim(adver_camp)
length(unique(adver_camp$ID))
length(unique(adver_camp$Advertiser.ID))
length(unique(adver_camp$Media.Plans.Filter...Categories))
length(unique(adver_camp$Campaign.Campaign.Category...Campaign.Category...ID))
length(unique(adver_camp$Publish.Period.Start))
length(unique(adver_camp$Campaign.Type))
length(unique(adver_camp$Manager.ID))
length(unique(adver_camp$Management.Percent.Fee))
length(unique(adver_camp$Quality.Of.Advertise))
length(unique(adver_camp$Quality.Of.Business))
length(unique(adver_camp$Is.Official))
length(unique(adver_camp$Is.Short.Link.Enabled))
length(unique(adver_camp$Is.Utm.Enabled))
length(unique(adver_camp$Is.Competition.Or.Has.Award))
dim(adver_camp)
advertiserDF <- adver_camp %>%
select( c(ID,Advertiser.ID,Media.Plans.Filter...Categories,Campaign.Campaign.Category...Campaign.Category...ID,
Campaign.Type, Manager.ID, Management.Percent.Fee, Is.Utm.Enabled,Publish.Period.Start,Budget,
Quality.Of.Advertise, Quality.Of.Business,Is.Official, Is.Short.Link.Enabled,Is.Competition.Or.Has.Award) )
dim(advertiserDF)
unique(advertiserDF$Media.Plans.Filter...Categories)[2]
unique(advertiserDF$Media.Plans.Filter...Categories)[4]
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[2] )] <-
NA )
##
( advertiserDF$Media.Plans.Filter...Categories[ which( advertiserDF$Media.Plans.Filter...Categories ==
unique(advertiserDF$Media.Plans.Filter...Categories)[4] )] <-
NA )
advertiserDF <- na.omit(advertiserDF)
dim(advertiserDF)
uniqAdvers <- unique(advertiserDF$Advertiser.ID)
class(uniqAdvers)
length(uniqAdvers)
allcateg <- advertiserDF$Media.Plans.Filter...Categories
class(allcateg)
allcateg[1]
#strsplit(x = allcateg[1], split = "")
num_ = 1
for (eachCategory in allcateg) {
temp <- str_extract_all(eachCategory, boundary("word"))
for (j in temp) {
for (p in j) {
if ( isTRUE( p == "") == FALSE) {
if (  isTRUE( p == "\"title_fa\"" ) == FALSE  ) {
if (  isTRUE( p == "title_fa" ) == FALSE  ) {
if (  isTRUE( p == "title" ) == FALSE  ) {
if (  is.na( str_extract(p , "\\D+")) == FALSE  ) {
advertiserDF$Media.Plans.Filter...Categories[[num_]] <- p
break
}
}
}
}
}
}
num_ = num_+1
}
}
allcateg <- advertiserDF$Media.Plans.Filter...Categories
allcateg[1]
allcateg[20]
allcateg[200]
library(polyglotr)
num__ = 1
for ( i in advertiserDF$Media.Plans.Filter...Categories) {
advertiserDF$Media.Plans.Filter...Categories[num__] <-
polyglotr::google_translate(i, target_language = "en", source_language = "fa")
num__ = num__+1
}
advertiserDF$Media.Plans.Filter...Categories
unique(advertiserDF$Media.Plans.Filter...Categories)
write.csv(x = advertiserDF , file =  "output/advertisers.csv")
